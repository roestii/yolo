#ifndef TEST_DATA_H
#define TEST_DATA_H

#include "f2x2_3x3_convolution.h"
#include "layers.h"
#include <math.h>

#define TEST_FILTER_CHANNELS 3
#define TEST_FILTER_SIZE 3
#define TEST_IMAGE_SIZE 8
#define TEST_IMAGE_CHANNELS 3
#define TEST_OUTPUT_SIZE 6
#define TEST_TILES TEST_OUTPUT_SIZE * TEST_OUTPUT_SIZE / 4
#define EPS 1e-2

// 3 * 8 * 8
static float testImage[] = {
    1.0030e+00, -7.9719e-01, -1.2836e+00,  1.2146e+00,  1.2180e+00, -1.2004e-01, -3.0324e-01,  5.7025e-01,
    -1.5090e+00,  1.8884e+00, -8.3879e-01, -4.1456e-01,  1.0871e+00, -2.3732e-01,  1.5855e-01, -2.5492e+00,
    2.8172e-01, -1.0152e+00,  8.1117e-01,  1.0030e+00, 4.6480e-01,  1.4884e+00,  9.8615e-01,  5.0825e-01,
    -1.6607e+00, 2.4470e-01,  7.8692e-01, -1.4318e-01, -7.1970e-02,  1.2011e+00, 1.6911e+00,  2.4500e-02,
    2.2925e-01, -2.2687e-01,  9.2714e-02, 9.4118e-01, -2.1650e-01,  1.4567e-01, -2.0871e-01, -3.5467e-01,
    -1.0009e-02, -3.7680e-01,  2.4436e-01, -8.9139e-01,  1.5121e+00,
    -5.4045e-01, -1.7853e-01,  1.5121e-02,  8.5428e-01, -4.9648e-01,
    8.6770e-01, -3.3097e-01,  8.0293e-01, -1.6081e+00,  1.5604e+00,
    -1.0236e+00,  1.4416e+00,  1.3520e-01, -3.0394e-01,  5.7589e-01,
    -7.6641e-01,  7.6427e-02,  2.3247e-02, -1.0174e+00,  7.7632e-02,
    3.4804e-01, -1.5159e-01,  8.5462e-03,  1.2346e+00, -6.5222e-01,
    6.0301e-01, -2.0244e-01, -2.0114e+00,  1.2186e+00,  3.8402e-01,
    -1.1989e-01, -1.7145e-01,  2.2940e+00,  2.1418e-01, -6.9910e-01,
    6.5492e-01, -1.1970e+00,  4.4018e-01, -1.9285e-01,  4.5225e-01,
    -1.9642e-01, -6.9077e-01,  2.2332e-01,  7.4665e-01, -5.1299e-01,
    -1.8662e-01,  4.4141e-01,  6.8881e-01, -3.3760e-02,  3.3350e-01,
    -4.4507e-01,  1.6321e+00, -1.1717e+00, -7.3580e-01, -2.9832e-01,
    3.8535e-01, -8.2510e-02, -1.3809e+00, -2.8915e-01, -1.4925e+00,
    -4.6710e-01, -1.0300e+00,  1.8371e-01, -5.1687e-01,  6.1722e-01,
    7.0307e-01,  1.1222e+00,  1.9273e+00, -8.7348e-01, -1.0212e+00,
    7.8699e-02, -1.9553e-01,  1.9319e+00, -4.5184e-01,  4.7122e-03,
    -4.9319e-01,  1.1754e+00, -8.7940e-02, -8.5939e-01, -1.5832e+00,
    4.4375e-01, -3.6743e-02, -6.2386e-01, -1.9656e-03,  4.6986e-01,
    -1.3896e+00, -5.4676e-01, -6.8569e-01, -1.3891e+00, -3.1386e-01,
    1.0981e+00,  5.2239e-01,  2.2071e-01, -1.5734e+00,  5.4456e-02,
    7.3507e-02,  7.7122e-01, -2.0417e-01,  8.7524e-01,  9.2527e-01,
    -1.2807e+00, -1.6179e+00,  7.0662e-01, -1.6992e-01, -4.0098e-01,
    -8.6504e-01, -1.4605e+00, -1.4541e-01,  9.6541e-01, -2.0080e-01,
    -6.3385e-01,  1.4063e+00, -4.9919e-01, -1.3140e+00,  1.3475e-01,
    2.4074e-02,  1.5055e+00,  2.7961e-04, -5.4913e-01,  3.5659e-01,
    1.3284e+00,  1.7589e-01, -1.7908e-02,  7.3478e-01,  6.9558e-01,
    1.0634e+00, -2.4920e-01, -2.3577e-02, -1.6739e-01, -8.4925e-01,
    -6.7817e-01,  1.4261e+00,  9.0194e-01, -7.4779e-01,  3.4431e-02,
    -2.0981e-01,  1.5640e+00, -8.7516e-02, -6.3122e-01, -7.4941e-01,
    1.1275e+00, -4.2285e-01, -9.1008e-01,  9.2318e-02, -1.2455e+00,
    -8.3147e-01, -1.2037e+00
};

// 3 * 3 * 3 * 3
static float testKernel[] = {
     0.1822, -0.6083,  1.0995, -0.1266, -0.6512, -0.4662,  1.3823, -1.2718,
     0.0973, -0.4191,  0.7098, -0.3835, -0.0081,  1.8420, -0.0353,  0.2822,
     0.4658, -0.1466, -0.9037, -1.1712,  0.7681, -0.6676, -1.4929, -0.6909,
     -0.1331,  0.4322,  0.3646,  0.6162,  1.4353,  1.2334, -0.5924, -1.5537,
     -0.8755, -1.5511, -0.7107,  0.7584,  0.6705,  1.2914,  0.7411, -0.1571,
     -0.7939,  1.1706, -0.7477, -0.0447,  0.5450,  0.8718,  1.2464,  0.0212,
     -0.2375, -0.1679,  1.1624, -0.0704, -1.0220,  2.0083,  0.4414, -1.1360,
     -0.2243,  1.3167,  0.0421,  1.6798, -1.2842,  0.8175,  1.3141,  0.6325,
     -0.7352,  0.1596, -0.4667, -0.2783,  0.2414,  1.1603, -1.0823, -2.7082,
     0.0552, -0.1388,  0.7002, -0.6510,  0.9268, -0.1423,  2.8307, -0.0581,
     -1.8185
};

void testConvolutionForward()
{
    float output[TEST_FILTER_CHANNELS * TEST_TILES *
			F2x2_3x3OUTPUT_TILE_SIZE * F2x2_3x3OUTPUT_TILE_SIZE] = {0};
    float U[TEST_FILTER_CHANNELS * TEST_IMAGE_CHANNELS *
		   F2x2_3x3INPUT_TILE_SIZE * F2x2_3x3INPUT_TILE_SIZE] = {0};
    float V[TEST_IMAGE_CHANNELS * TEST_TILES *
		   F2x2_3x3INPUT_TILE_SIZE * F2x2_3x3INPUT_TILE_SIZE] = {0};
    float M[TEST_FILTER_CHANNELS * TEST_TILES *
		   F2x2_3x3INPUT_TILE_SIZE * F2x2_3x3INPUT_TILE_SIZE] = {0};
    float Utmp[TEST_FILTER_CHANNELS * TEST_IMAGE_CHANNELS] = {0};
    float Vtmp[TEST_IMAGE_CHANNELS * TEST_TILES] = {0};
    float Mtmp[TEST_FILTER_CHANNELS * TEST_TILES] = {0};

    float expected[] = {
	-0.0227,  3.1503,  2.2196, -0.1066,  2.3752,  4.3258,
	-4.4585,  3.2144,  2.9045, -0.7439, -1.7257, -3.7768,
	-1.4922,  2.7987, -0.6163,  3.1156, -0.4098,  1.2584,
	-5.0871, -5.5150,  3.0065, -3.7423, -1.0198, -2.4282,
	-3.5687, -7.2243,  1.4735, -0.7978,  5.3112, -3.6643,
	-0.3914, -5.2213,  1.0831, -2.7433, -0.2249, -1.6548,
	-5.9655,  3.7522, -0.7972,  3.1586, -7.0933, -3.8931,
	3.1125, -3.1726, -0.0541, -2.8078, -2.5397, -6.4351,
	-5.4950, -2.6114,  5.5279,  2.9568, -4.2548, -3.6926,
	3.1775, -1.3929,  2.2072,  4.3760,  0.4891,  2.7722,
	-3.2115,  3.0090, -1.2917,  3.3826, -0.3870, -2.7874,
	-7.9844, -2.7095, -0.5225,  3.3562,  0.8631, -4.2981,
	4.2045, -2.4310, -5.4525,  0.5528,  9.5501, -5.6429,
	-0.3768,  5.0723, -3.1724,  3.3745, 10.2058,  4.1083,
	6.2456,  4.8398, -2.1411, -3.6407,  4.4391,  4.6554,
	2.2588,  1.7787,  5.0306,  1.2947, -6.4834, -3.9510,
	13.8102,  1.4928, -1.4367, -9.3480, -0.1981, 10.1397,
	-3.1993,  7.2083,  7.0802, -6.6493,  5.4392, -6.3684
    };
    
    f2x2_3x3Convolution(output, U, V, M, Utmp, Vtmp, Mtmp,
			testImage, testKernel, TEST_IMAGE_SIZE,
			TEST_IMAGE_CHANNELS, TEST_FILTER_CHANNELS,
			TEST_TILES);
    for (int i = 0;
	 i < sizeof(output) / sizeof(float);
	 ++i)
    {
	assert(abs(output[i] - expected[i]) < EPS);
    }
}

#define PADDED_SIZE (TEST_OUTPUT_SIZE + 2 * PADDING)
#define TEST_INPUT_CHANNELS 3
#define TEST_INPUT_SIZE 8
#define TEST_OUTPUT_CHANNELS 2
#define TEST_OUTPUT_SIZE 6

void testConvolutionBackward()
{
    static float input[TEST_INPUT_CHANNELS * TEST_INPUT_SIZE * TEST_INPUT_SIZE] = {
	1.0030e+00, -7.9719e-01, -1.2836e+00,  1.2146e+00,  1.2180e+00,
	-1.2004e-01, -3.0324e-01,  5.7025e-01, -1.5090e+00,  1.8884e+00,
	-8.3879e-01, -4.1456e-01,  1.0871e+00, -2.3732e-01,  1.5855e-01,
	-2.5492e+00,  2.8172e-01, -1.0152e+00,  8.1117e-01,  1.0030e+00,
	4.6480e-01,  1.4884e+00,  9.8615e-01,  5.0825e-01, -1.6607e+00,
	2.4470e-01,  7.8692e-01, -1.4318e-01, -7.1970e-02,  1.2011e+00,
	1.6911e+00,  2.4500e-02,  2.2925e-01, -2.2687e-01,  9.2714e-02,
	9.4118e-01, -2.1650e-01,  1.4567e-01, -2.0871e-01, -3.5467e-01,
	-1.0009e-02, -3.7680e-01,  2.4436e-01, -8.9139e-01,  1.5121e+00,
	-5.4045e-01, -1.7853e-01,  1.5121e-02,  8.5428e-01, -4.9648e-01,
	8.6770e-01, -3.3097e-01,  8.0293e-01, -1.6081e+00,  1.5604e+00,
	-1.0236e+00,  1.4416e+00,  1.3520e-01, -3.0394e-01,  5.7589e-01,
	-7.6641e-01,  7.6427e-02,  2.3247e-02, -1.0174e+00,  7.7632e-02,
	3.4804e-01, -1.5159e-01,  8.5462e-03,  1.2346e+00, -6.5222e-01,
	6.0301e-01, -2.0244e-01, -2.0114e+00,  1.2186e+00,  3.8402e-01,
	-1.1989e-01, -1.7145e-01,  2.2940e+00,  2.1418e-01, -6.9910e-01,
	6.5492e-01, -1.1970e+00,  4.4018e-01, -1.9285e-01,  4.5225e-01,
	-1.9642e-01, -6.9077e-01,  2.2332e-01,  7.4665e-01, -5.1299e-01,
	-1.8662e-01,  4.4141e-01,  6.8881e-01, -3.3760e-02,  3.3350e-01,
	-4.4507e-01,  1.6321e+00, -1.1717e+00, -7.3580e-01, -2.9832e-01,
	3.8535e-01, -8.2510e-02, -1.3809e+00, -2.8915e-01, -1.4925e+00,
	-4.6710e-01, -1.0300e+00,  1.8371e-01, -5.1687e-01,  6.1722e-01,
	7.0307e-01,  1.1222e+00,  1.9273e+00, -8.7348e-01, -1.0212e+00,
	7.8699e-02, -1.9553e-01,  1.9319e+00, -4.5184e-01,  4.7122e-03,
	-4.9319e-01,  1.1754e+00, -8.7940e-02, -8.5939e-01, -1.5832e+00,
	4.4375e-01, -3.6743e-02, -6.2386e-01, -1.9656e-03,  4.6986e-01,
	-1.3896e+00, -5.4676e-01, -6.8569e-01, -1.3891e+00, -3.1386e-01,
	1.0981e+00,  5.2239e-01,  2.2071e-01, -1.5734e+00,  5.4456e-02,
	7.3507e-02,  7.7122e-01, -2.0417e-01,  8.7524e-01,  9.2527e-01,
	-1.2807e+00, -1.6179e+00,  7.0662e-01, -1.6992e-01, -4.0098e-01,
	-8.6504e-01, -1.4605e+00, -1.4541e-01,  9.6541e-01, -2.0080e-01,
	-6.3385e-01,  1.4063e+00, -4.9919e-01, -1.3140e+00,  1.3475e-01,
	2.4074e-02,  1.5055e+00,  2.7961e-04, -5.4913e-01,  3.5659e-01,
	1.3284e+00,  1.7589e-01, -1.7908e-02,  7.3478e-01,  6.9558e-01,
	1.0634e+00, -2.4920e-01, -2.3577e-02, -1.6739e-01, -8.4925e-01,
	-6.7817e-01,  1.4261e+00,  9.0194e-01, -7.4779e-01,  3.4431e-02,
	-2.0981e-01,  1.5640e+00, -8.7516e-02, -6.3122e-01, -7.4941e-01,
	1.1275e+00, -4.2285e-01, -9.1008e-01,  9.2318e-02, -1.2455e+00,
	-8.3147e-01, -1.2037e+00
    };
    static float kernel[TEST_OUTPUT_CHANNELS * TEST_INPUT_CHANNELS *
			F2x2_3x3FILTER_SIZE * F2x2_3x3FILTER_SIZE] = {
	0.1822, -0.6083,  1.0995,
	-0.1266, -0.6512, -0.4662,
	1.3823, -1.2718, 0.0973,
	
	-0.4191,  0.7098, -0.3835,
	-0.0081,  1.8420, -0.0353,
	0.2822, 0.4658, -0.1466,
	
	-0.9037, -1.1712,  0.7681,
	-0.6676, -1.4929, -0.6909,
	-0.1331,  0.4322,  0.3646,

	0.6162,  1.4353,  1.2334,
	-0.5924, -1.5537, -0.8755,
	-1.5511, -0.7107,  0.7584,

	0.6705,  1.2914,  0.7411,
	-0.1571, -0.7939,  1.1706,
	-0.7477, -0.0447,  0.5450,
	
	0.8718,  1.2464,  0.0212,
	-0.2375, -0.1679,  1.1624,
	-0.0704, -1.0220,  2.0083
    };
    static float dloutput[TEST_OUTPUT_CHANNELS * TEST_OUTPUT_SIZE * TEST_OUTPUT_SIZE] = {
	2.3075,   9.6808,   2.7081,   0.0883,   2.8843,  12.3322,
	-8.1986,   5.4729,   8.1039,  -2.1988,  -3.6843,  -6.7676,
	-4.6121,   4.8888,  -3.1787,   6.6263,  -5.2681,   3.6558,
	-10.6830, -12.9366,   4.1588,  -6.1397,  -1.8360,  -3.5313,
	-9.4774, -16.6934,   3.2862,   1.0228,  11.0706,  -6.2367,
	-0.7997, -13.4453,   2.1679,  -0.7895,  -1.2695,  -3.1667,

        -10.6606,   7.5128,  -2.9391,   5.7598, -12.0326,  -8.4156,
	7.3743,  -2.8819,   1.2193,  -6.6877,  -4.2630, -10.8563,
	-9.0255,  -3.9851,  13.2369,   7.1973,  -9.1178,  -6.8363,
	9.4696,  -4.0812,   2.0243,  10.2236,  -0.2662,   8.0173,
	-5.5098,   7.6394,  -2.7358,   4.6973,   4.6495,  -6.2900,
	-18.0947,  -8.4371,  -4.5465,   6.0340,  -1.5091, -10.3662
    };
    float paddeddloutput[TEST_OUTPUT_CHANNELS * PADDED_SIZE * PADDED_SIZE] = {0};
    float dlinput[sizeof(input) / sizeof(float)] = {0};
    float dlkernel[sizeof(kernel) / sizeof(float)] = {0};
    static float dlinputExpected[sizeof(input) / sizeof(float)] = {
	-6.1487, -10.3116,  -7.0351,  17.6098,   0.6767, -14.7624, -31.2503, 3.1795,
	9.0735,  24.1775, -13.4775, -16.9492,  -2.0781,  -7.3094,  -6.5397, -19.2126,
	9.9929, -10.4473, -37.9976,  20.5475,  39.0010,  65.2853, -20.8978, 3.0650,
	-12.9519,  51.2079,  18.7650, -41.5823,  16.2256,  32.5981,  42.7189, 1.3947,
	-1.7550,  21.0414, -23.0592, -23.2209,  -0.9189,  28.0038,  -3.6138, -24.8171,
	-36.2871, -25.5087,   8.0178, -64.5935,  -6.1441, -23.9272, -13.1942, -2.1163,
	6.2662,  16.3793,  59.9844,  11.8949,  -3.1395,  -7.7880,  37.0866, 5.1747,
	26.9612,   8.3783,  19.3439, -17.6833,  -5.9355,  18.8880,  10.1267, -8.1698,

	-8.1150, -11.1492,   4.6823,   3.8067,  -4.9925, -20.0680, -12.1379, -10.9662,
	10.0366,  10.9329,   5.9400,  14.3984, -19.7948,   6.1509,  -5.3600, -15.7368,
	3.4114, -41.5321,  25.6317,  23.3060,  31.8167, -13.4499, -20.5378, -25.3322,
	4.4544,   6.1385,   5.2633,   0.2722,  33.8142,  23.2697,   5.5774,  -5.7603,
	4.3234, -25.5596, -27.7041,   5.2877,   0.6114,  30.1784, -28.6544,   2.9782,
	-20.9501, -44.1040, -79.4819,   8.1004,  -6.5749,  18.1408, -19.5877,  -8.7238,
	4.2943,  -0.2645, -45.2826,   2.2995, -13.4545,  17.9070,  -1.0380, -14.5366,
	13.3037,   2.9505, -11.6189,  -6.1485,  -2.6630,   9.7375,  -1.6480,  -5.1853,

        -11.3792, -18.1888,  -5.4374,   5.7016,  -4.0033, -36.6669, -22.9723,   9.2940,
	14.8294,   1.4331, -53.2134, -10.6041,  -5.3510,  -8.0635, -41.5025, -23.7310,
	0.4649,   4.3674, -23.3804,  30.1750, -10.7435,  21.9366, -16.7085, -17.6852,
	23.7045,  26.9255,   1.0770, -10.3021,  48.8407,  10.0636,  -0.2905, -37.2849,
	9.8935,  56.8033,  37.3206, -39.9436,  31.6660,  37.1384,   1.2859,  -5.5610,
	-6.6613,  -4.7033,  33.5550, -11.6567, -13.6727,   3.7328, -13.0197,   9.1588,
	6.4807,  18.4309, -29.1471,   9.1082, -15.8667,  25.3963,  22.6978, -24.7679,
	1.3803,  20.5307, -33.7880, -16.5826, -14.5731,  13.9750,   5.7320, -21.9730
    };
    static float dlkernelExpected[sizeof(kernel) / sizeof(float)] = {
	28.7746, -56.2681,  36.0625,
	41.1628,  -8.5996, -37.0955,
	60.9070, -36.7296,  45.5846,

	-0.3766,  43.3342, -13.0254,
	28.8381,  97.8572,  11.3137,
	-59.1111,  63.1488,  30.8499,

	-86.9198, -67.8189,  57.8571,
	-80.3777, -33.5586,  23.9251,
	-73.2544, -34.3707,  26.4601,


	-38.8984,  48.6684,  57.5975,
	31.3876, -74.6514, -48.0961,
	-73.8048, -23.4512,  -6.1176,

	-18.8712,  41.3045, -10.7907,
	-13.3248, -31.8945,  57.8484,
	-88.3569,  20.7320,  69.0795,

	-36.8345,  43.0340,  -9.5539,
	-65.1678,   8.5825,  93.4660,
	-22.1097, -17.9883, 109.0807
    };

    convolutionBackward(dlkernel, dlinput, dloutput, paddeddloutput, kernel, input,
			TEST_INPUT_CHANNELS, TEST_INPUT_SIZE, TEST_OUTPUT_CHANNELS, TEST_OUTPUT_SIZE);
    for (int i = 0;
	 i < sizeof(dlkernel) / sizeof(float);
	 ++i)
    {
	assert(abs(dlkernel[i] - dlkernelExpected[i]) < EPS);
    }

    for (int i = 0;
	 i < sizeof(dlinput) / sizeof(float);
	 ++i)
    {
	assert(abs(dlinput[i] - dlinputExpected[i]) < EPS);
    }
}

/* void testF3x3_2x2Convolution()
{
    float output[TEST_FILTER_CHANNELS * TEST_TILES *
			F3x3_2x2OUTPUT_TILE_SIZE * F3x3_2x2OUTPUT_TILE_SIZE] = {0};
    float U[TEST_FILTER_CHANNELS * TEST_IMAGE_CHANNELS *
		   F3x3_2x2INPUT_TILE_SIZE * F3x3_2x2INPUT_TILE_SIZE] = {0};
    float V[TEST_IMAGE_CHANNELS * TEST_TILES *
		   F3x3_2x2INPUT_TILE_SIZE * F3x3_2x2INPUT_TILE_SIZE] = {0};
    float M[TEST_FILTER_CHANNELS * TEST_TILES *
		   F3x3_2x2INPUT_TILE_SIZE * F3x3_2x2INPUT_TILE_SIZE] = {0};
    float Utmp[TEST_FILTER_CHANNELS * TEST_IMAGE_CHANNELS] = {0};
    float Vtmp[TEST_IMAGE_CHANNELS * TEST_TILES] = {0};
    float Mtmp[TEST_FILTER_CHANNELS * TEST_TILES] = {0};

    float expected[sizeof(output) / sizeof(float)] = {
	-0.0227,  3.1503,  2.2196, -0.1066,  2.3752,  4.3258,
	-4.4585,  3.2144,  2.9045, -0.7439, -1.7257, -3.7768,
	-1.4922,  2.7987, -0.6163,  3.1156, -0.4098,  1.2584,
	-5.0871, -5.5150,  3.0065, -3.7423, -1.0198, -2.4282,
	-3.5687, -7.2243,  1.4735, -0.7978,  5.3112, -3.6643,
	-0.3914, -5.2213,  1.0831, -2.7433, -0.2249, -1.6548,
	-5.9655,  3.7522, -0.7972,  3.1586, -7.0933, -3.8931,
	3.1125, -3.1726, -0.0541, -2.8078, -2.5397, -6.4351,
	-5.4950, -2.6114,  5.5279,  2.9568, -4.2548, -3.6926,
	3.1775, -1.3929,  2.2072,  4.3760,  0.4891,  2.7722,
	-3.2115,  3.0090, -1.2917,  3.3826, -0.3870, -2.7874,
	-7.9844, -2.7095, -0.5225,  3.3562,  0.8631, -4.2981,
	4.2045, -2.4310, -5.4525,  0.5528,  9.5501, -5.6429,
	-0.3768,  5.0723, -3.1724,  3.3745, 10.2058,  4.1083,
	6.2456,  4.8398, -2.1411, -3.6407,  4.4391,  4.6554,
	2.2588,  1.7787,  5.0306,  1.2947, -6.4834, -3.9510,
	13.8102,  1.4928, -1.4367, -9.3480, -0.1981, 10.1397,
	-3.1993,  7.2083,  7.0802, -6.6493,  5.4392, -6.3684
    };
    
    f3x3_2x2Convolution(output, U, V, M, Utmp, Vtmp, Mtmp,
			testImage, testKernel, TEST_IMAGE_SIZE,
			TEST_IMAGE_CHANNELS, TEST_FILTER_CHANNELS,
			TEST_TILES);
    for (int i = 0;
	 i < sizeof(output) / sizeof(float);
	 ++i)
    {
	assert(abs(output[i] - expected[i]) < EPS);
    }
}
*/

#endif
