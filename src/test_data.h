#ifndef TEST_DATA_H
#define TEST_DATA_H
/*
#define N_CHANNELS 3
#define KERNEL_STRIDE 1
#define KERNEL_SIZE 3
#define IMAGE_SIZE 9
#define N_KERNELS 3
#define N_PATCHES ((IMAGE_SIZE - KERNEL_SIZE) / KERNEL_STRIDE + 1) * ((IMAGE_SIZE - KERNEL_SIZE) / KERNEL_STRIDE + 1)
#define N_ENTRIES_PATCH KERNEL_SIZE * KERNEL_SIZE * N_CHANNELS
*/

// 3 * 4 * 4
static float testImage[] = {
    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
    17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
    34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47
};


// 2 * 3 * 2 * 2
static float testKernelCol[] = {
    0, 12,
    1, 13,
    2, 14,
    3, 15,
    4, 16,
    5, 17,
    6, 18,
    7, 19,
    8, 20,
    9, 21,
    10, 22,
    11, 23
};

static float testKernelRow[] = {
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
    12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23
};

// 3 * 9 * 9
static float testNineByNineImage[] = {
    -2.8156e-01, -9.2569e-01, -8.3757e-01,  3.9723e-01, -9.3799e-01,
    1.5739e+00,  6.8643e-01, -4.4338e-01,  1.1335e+00,  5.3664e-01,
    7.0688e-01,  4.9964e-02, -8.2171e-01,  8.4264e-01, -1.4790e-01,
    -9.1877e-04, -1.8666e+00,  6.6722e-01,  4.7662e-01,  2.0274e+00,
    -1.6439e+00, -1.7225e+00,  1.4067e-01,  3.9877e-01, -5.0429e-01,
    -1.0555e+00, -1.0164e+00,  1.1871e+00,  9.3936e-02, -1.3842e+00,
    -7.4532e-01, -5.7624e-01, -3.3729e-01, -5.0079e-01, -2.5758e+00,
    2.0004e-01,  2.9620e-01,  5.4618e-02,  1.7571e+00, -1.3173e+00,
    2.1661e+00,  1.2328e+00,  1.4919e+00, -4.2765e-02, -1.1933e+00,
    2.6339e-01, -8.5857e-01,  8.2420e-01,  1.1445e+00,  1.8840e+00,
    -3.2171e-01,  1.4743e+00, -1.9144e+00,  1.2146e-02, -4.4442e-01,
    9.1965e-01, -1.0708e-01, -8.1598e-01, -3.8221e-01, -7.4671e-01,
    1.2985e+00, -4.0232e-01, -1.6210e+00,  4.6691e-01,  2.5791e-02,
    8.3447e-01,  3.4356e-02,  3.3962e-01,  3.7093e-01,  6.0480e-01,
    2.5744e-01,  4.0800e-01,  1.0858e+00, -1.7421e+00, -2.9222e-01,
    5.3499e-01,  5.3041e-01,  3.6377e-02, -7.5961e-01, -5.8346e-01,
    1.9347e+00,  4.5224e-01, -1.1321e+00,  6.8779e-01,  1.3259e-01,
    1.0354e+00,  7.5320e-01, -2.9505e-01, -7.9746e-01,  7.0403e-01,
    -1.8481e-01,  1.1024e+00,  5.8109e-01,  1.1926e+00, -1.0473e+00,
    4.6182e-01,  1.9448e-01, -2.2481e-01,  7.5337e-02,  2.8529e-01,
    -7.9037e-01,  3.0713e-01, -1.1894e+00,  4.8773e-01,  5.8162e-01,
    -9.7366e-01, -7.7836e-01, -6.8016e-01,  3.2454e-01, -1.7368e+00,
    7.2803e-01, -6.4282e-03,  6.1936e-02,  5.8322e-02,  3.0741e-01,
    -3.1676e-01,  1.1635e+00, -4.1569e-01, -5.1651e-01,  4.5290e-01,
    -1.1030e+00,  1.1903e+00,  1.3147e-01,  3.4777e-01,  5.2411e-01,
    -6.2649e-01, -8.2599e-01,  3.0270e-01, -1.1000e+00,  2.2269e-01,
    -2.8604e-01, -1.1948e+00,  5.7551e-01, -4.3768e-01, -5.8064e-01,
    1.6669e+00,  1.0278e+00,  1.5588e-01,  3.0693e-01, -9.9497e-01,
    1.1150e+00, -1.1409e+00,  1.5019e-01,  1.0607e+00, -2.4600e-02,
    9.1375e-01, -4.3769e-03,  3.3312e+00,  2.5447e-02,  6.3595e-01,
    -4.9390e-01, -2.5703e+00, -2.7558e-01, -2.6320e-01,  1.7255e+00,
    -2.0944e+00,  5.9337e-01, -3.2325e-02, -5.1849e-01, -1.8563e-01,
    3.6050e-01, -6.4834e-01, -2.3257e+00, -5.2497e-02,  2.8351e-01,
    7.4444e-01,  4.0344e-01, -1.0001e+00,  7.5143e-01,  8.3949e-01,
    4.8819e-01, -6.5199e-01, -1.3780e-02, -1.7029e+00,  8.2900e-01,
    -1.1137e+00, -9.8405e-01, -3.3725e-01, -1.9614e+00,  1.0560e+00,
    6.5673e-01, -6.3222e-01,  3.3790e-02,  2.0609e+00,  1.1320e+00,
    9.8764e-01,  6.4442e-01, -7.2688e-01, -1.7129e+00,  6.3062e-01,
    2.6401e-01,  2.0389e+00,  6.4836e-01,  1.0848e+00,  1.0193e+00,
    -1.7026e+00,  2.1114e-01, -1.0075e+00, -4.1187e-01,  2.0420e+00,
    1.2996e+00,  3.0933e-01, -3.7138e-01,  2.8222e-01,  9.2950e-01,
    9.2400e-01,  1.1022e+00,  1.2326e-01,  1.2288e+00, -8.2048e-01,
    1.4883e+00,  1.3379e+00,  7.7988e-01, -3.2638e-01,  2.9987e-01,
    -6.3073e-01,  1.4624e+00,  6.9555e-01, -4.3115e-01, -1.4597e+00,
    5.6007e-01,  2.6116e-01, -3.6068e-01,  2.8802e-03,  3.8428e-01,
    6.6160e-01, -1.7508e-01,  8.3732e-02, -1.5157e-01,  4.7227e-01,
    -4.2315e-01, -4.4363e-01, -9.1190e-01, -2.4321e-01, -1.0779e+00,
    -1.2314e+00, -1.3553e-01,  1.1326e+00, -4.3289e-01, -6.3152e-01,
    -3.4610e-01,  5.1013e-02,  6.0245e-01
};

// 3 * 3 * 3 * 3
static float testThreeByThreeKernel[] = {
     0.1822, -0.6083,  1.0995, -0.1266, -0.6512, -0.4662,  1.3823, -1.2718,
     0.0973, -0.4191,  0.7098, -0.3835, -0.0081,  1.8420, -0.0353,  0.2822,
     0.4658, -0.1466, -0.9037, -1.1712,  0.7681, -0.6676, -1.4929, -0.6909,
     -0.1331,  0.4322,  0.3646,  0.6162,  1.4353,  1.2334, -0.5924, -1.5537,
     -0.8755, -1.5511, -0.7107,  0.7584,  0.6705,  1.2914,  0.7411, -0.1571,
     -0.7939,  1.1706, -0.7477, -0.0447,  0.5450,  0.8718,  1.2464,  0.0212,
     -0.2375, -0.1679,  1.1624, -0.0704, -1.0220,  2.0083,  0.4414, -1.1360,
     -0.2243,  1.3167,  0.0421,  1.6798, -1.2842,  0.8175,  1.3141,  0.6325,
     -0.7352,  0.1596, -0.4667, -0.2783,  0.2414,  1.1603, -1.0823, -2.7082,
     0.0552, -0.1388,  0.7002, -0.6510,  0.9268, -0.1423,  2.8307, -0.0581,
     -1.8185
};


/* int test_conv()
{
    // # of patches = ((imageSize - kernelSize + 2 * padding) / 2 + 1) ** 2
    // # of entries inside patch = kernelSize ** 2 * # of channels
    
    float patches[N_PATCHES * N_ENTRIES_PATCH] = {0};
    // imageToRows(patches, testImage, 4, 3, 2, 2);

    imageToColumns(patches, testNineByNineImage,
		   IMAGE_SIZE, N_CHANNELS, KERNEL_SIZE,
		   KERNEL_STRIDE);
    
    float conv[N_KERNELS * N_PATCHES] = {0};
    matmulSlow(testThreeByThreeKernel, patches, conv, N_KERNELS, N_PATCHES, N_ENTRIES_PATCH);
    // float conv[4 * 2] = {0}; 
    // matmulSlow(patches, testKernel, conv, 4, 2, 2 * 2 * 3);
    printf("");
} */


#endif
